// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema to test partitioned table-specific features ignoring partition parents and using partitions 1`] = `
"""All input for the create \`TemperatureLogY2022M07\` mutation."""
input CreateTemperatureLogY2022M07Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`TemperatureLogY2022M07\` to be created by this mutation."""
  temperatureLogY2022M07: TemperatureLogY2022M07Input!
}

"""The output of our create \`TemperatureLogY2022M07\` mutation."""
type CreateTemperatureLogY2022M07Payload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The \`TemperatureLogY2022M07\` that was created by this mutation."""
  temperatureLogY2022M07: TemperatureLogY2022M07

  """An edge for our \`TemperatureLogY2022M07\`. May be used by Relay 1."""
  temperatureLogY2022M07Edge(
    """The method to use when ordering \`TemperatureLogY2022M07\`."""
    orderBy: [TemperatureLogY2022M07SOrderBy!] = [NATURAL]
  ): TemperatureLogY2022M07SEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`TemperatureLogY2022M07\`."""
  createTemperatureLogY2022M07(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemperatureLogY2022M07Input!
  ): CreateTemperatureLogY2022M07Payload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Reads and enables pagination through a set of \`TemperatureLogY2022M07\`.
  """
  allTemperatureLogY2022M07S(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemperatureLogY2022M07Condition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`TemperatureLogY2022M07\`."""
    orderBy: [TemperatureLogY2022M07SOrderBy!] = [NATURAL]
  ): TemperatureLogY2022M07SConnection

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

type TemperatureLogY2022M07 {
  logDate: Date!
  temperature: Int
}

"""
A condition to be used against \`TemperatureLogY2022M07\` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TemperatureLogY2022M07Condition {
  """Checks for equality with the object’s \`logDate\` field."""
  logDate: Date

  """Checks for equality with the object’s \`temperature\` field."""
  temperature: Int
}

"""An input for mutations affecting \`TemperatureLogY2022M07\`"""
input TemperatureLogY2022M07Input {
  logDate: Date!
  temperature: Int
}

"""A connection to a list of \`TemperatureLogY2022M07\` values."""
type TemperatureLogY2022M07SConnection {
  """
  A list of edges which contains the \`TemperatureLogY2022M07\` and cursor to aid in pagination.
  """
  edges: [TemperatureLogY2022M07SEdge!]!

  """A list of \`TemperatureLogY2022M07\` objects."""
  nodes: [TemperatureLogY2022M07]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`TemperatureLogY2022M07\` you could get from the connection.
  """
  totalCount: Int!
}

"""A \`TemperatureLogY2022M07\` edge in the connection."""
type TemperatureLogY2022M07SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`TemperatureLogY2022M07\` at the end of the edge."""
  node: TemperatureLogY2022M07
}

"""Methods to use when ordering \`TemperatureLogY2022M07\`."""
enum TemperatureLogY2022M07SOrderBy {
  LOG_DATE_ASC
  LOG_DATE_DESC
  NATURAL
  TEMPERATURE_ASC
  TEMPERATURE_DESC
}

`;

exports[`prints a schema to test partitioned table-specific features using partition parents and ignoring partitions 1`] = `
"""All input for the create \`TemperatureLog\` mutation."""
input CreateTemperatureLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`TemperatureLog\` to be created by this mutation."""
  temperatureLog: TemperatureLogInput!
}

"""The output of our create \`TemperatureLog\` mutation."""
type CreateTemperatureLogPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The \`TemperatureLog\` that was created by this mutation."""
  temperatureLog: TemperatureLog

  """An edge for our \`TemperatureLog\`. May be used by Relay 1."""
  temperatureLogEdge(
    """The method to use when ordering \`TemperatureLog\`."""
    orderBy: [TemperatureLogsOrderBy!] = [NATURAL]
  ): TemperatureLogsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`TemperatureLog\`."""
  createTemperatureLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemperatureLogInput!
  ): CreateTemperatureLogPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`TemperatureLog\`."""
  allTemperatureLogs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemperatureLogCondition

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`TemperatureLog\`."""
    orderBy: [TemperatureLogsOrderBy!] = [NATURAL]
  ): TemperatureLogsConnection

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

type TemperatureLog {
  logDate: Date!
  temperature: Int
}

"""
A condition to be used against \`TemperatureLog\` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TemperatureLogCondition {
  """Checks for equality with the object’s \`logDate\` field."""
  logDate: Date

  """Checks for equality with the object’s \`temperature\` field."""
  temperature: Int
}

"""An input for mutations affecting \`TemperatureLog\`"""
input TemperatureLogInput {
  logDate: Date!
  temperature: Int
}

"""A connection to a list of \`TemperatureLog\` values."""
type TemperatureLogsConnection {
  """
  A list of edges which contains the \`TemperatureLog\` and cursor to aid in pagination.
  """
  edges: [TemperatureLogsEdge!]!

  """A list of \`TemperatureLog\` objects."""
  nodes: [TemperatureLog]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`TemperatureLog\` you could get from the connection."""
  totalCount: Int!
}

"""A \`TemperatureLog\` edge in the connection."""
type TemperatureLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`TemperatureLog\` at the end of the edge."""
  node: TemperatureLog
}

"""Methods to use when ordering \`TemperatureLog\`."""
enum TemperatureLogsOrderBy {
  LOG_DATE_ASC
  LOG_DATE_DESC
  NATURAL
  TEMPERATURE_ASC
  TEMPERATURE_DESC
}

`;
